require "./spec_helper"

describe <%= context.module_name %>::PasswordUpdateSchema do
  describe "#valid?" do
    it "returns true if old password is correct and the new password and its confirmation are equal" do
      email = "test@example.com"
      user = create_user(email: email, password: "insecure")

      schema = <%= context.module_name %>::PasswordUpdateSchema.new(
        Marten::HTTP::Params::Data{
          "old_password"         => ["insecure"],
          "new_password"         => ["newinsecure"],
          "new_confirm_password" => ["newinsecure"],
        }
      )

      schema.user = user

      schema.valid?.should be_true
      schema.errors.should be_empty
    end

    it "returns false if old password is not correct and the new password and its confirmation are equal" do
      email = "test@example.com"
      user = create_user(email: email, password: "insecure")

      schema = <%= context.module_name %>::PasswordUpdateSchema.new(
        Marten::HTTP::Params::Data{
          "old_password"         => ["invalid"],
          "new_password"         => ["newinsecure"],
          "new_confirm_password" => ["newinsecure"],
        }
      )

      schema.user = user

      schema.valid?.should be_false
      schema.errors[0].message.should eq "Invalid user password"
    end

    it "returns false if old password is correct but the new password and its confirmation are not equal" do
      email = "test@example.com"
      user = create_user(email: email, password: "insecure")

      schema = <%= context.module_name %>::PasswordUpdateSchema.new(
        Marten::HTTP::Params::Data{
          "old_password"         => ["insecure"],
          "new_password"         => ["newinsecure"],
          "new_confirm_password" => ["wronginsecure"],
        }
      )

      schema.user = user

      schema.valid?.should be_false
      schema.errors[0].message.should eq "Your new confirmed password does not match"
      schema.errors[0].type.should eq "invalid"
    end

    it "returns false if no new confirmation password was given" do
      email = "test@example.com"
      user = create_user(email: email, password: "insecure")

      schema = <%= context.module_name %>::PasswordUpdateSchema.new(
        Marten::HTTP::Params::Data{
          "old_password"         => ["insecure"],
          "new_password"         => ["newinsecure"],
        }
      )

      schema.user = user

      schema.valid?.should be_false
      schema.errors[0].field.should eq "new_confirm_password"
      schema.errors[0].type.should eq "required"
    end

    it "returns false if no new password was given" do
      email = "test@example.com"
      user = create_user(email: email, password: "insecure")

      schema = <%= context.module_name %>::PasswordUpdateSchema.new(
        Marten::HTTP::Params::Data{
          "old_password"         => ["insecure"],
          "new_confirm_password" => ["wronginsecure"],
        }
      )

      schema.user = user

      schema.valid?.should be_false
      schema.errors[0].field.should eq "new_password"
      schema.errors[0].type.should eq "required"
    end

    it "returns false if no old password was given" do
      email = "test@example.com"
      user = create_user(email: email, password: "insecure")

      schema = <%= context.module_name %>::PasswordUpdateSchema.new(
        Marten::HTTP::Params::Data{
          "new_password"         => ["newinsecure"],
          "new_confirm_password" => ["wronginsecure"],
        }
      )

      schema.user = user

      schema.valid?.should be_false
      schema.errors[0].field.should eq "old_password"
      schema.errors[0].type.should eq "required"
    end
  end
end
